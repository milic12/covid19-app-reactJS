{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/coronaworld4.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spaing","justify","item","component","Card","xs","md","cx","card","inficirani","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","izlijeceni","smrtnost","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","this","image","src","coronaImage","alt","CountryPicker","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33391472.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3xFBz\",\"card\":\"Cards_card__1dWa2\",\"inficirani\":\"Cards_inficirani__3YYF1\",\"izlijeceni\":\"Cards_izlijeceni__1ANAy\",\"smrtnost\":\"Cards_smrtnost__1CDpO\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid} from  '@material-ui/core';//bootstrap\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nconst Cards = ({  data:{confirmed,recovered, deaths, lastUpdate}}) =>{\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }    \r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spaing ={3} justify=\"center\">\r\n                {/*xs i md da bude responzivna aplikacija i css iz cx-a*/}\r\n                <Grid item component={Card} xs={12} md={3 }className={cx(styles.card, styles.inficirani)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Inficirani</Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>   {/*Definiramo Vrijeme u citljivom formatu*/}\r\n                        <Typography variant=\"body2\" component=\"p\">Broj Aktivnih Slucajeva COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.izlijeceni)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Izlijeceni</Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            /></Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\"component=\"p\">Broj Izlijecenih Slucajeva COVID-19</Typography>\r\n        </CardContent>\r\n        </Grid>\r\n\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.smrtnost)}>\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom >Smrtnost</Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            /></Typography>\r\n                <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                <Typography variant=\"body2\" component=\"p\">Broj Smrtnih Slucajeva COVID-19</Typography>\r\n            </CardContent>\r\n            </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n        \r\n    );      \r\n\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line \r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Inficirani',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Smrtnost',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar \r\n        data={{\r\n          labels: ['Inficirani', 'Izlijeceni', 'Smrtnost'],\r\n          datasets: [\r\n            {\r\n              label: 'Ljudi',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text:`Trenutacno Stanje u  ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Globalo Stanje(Biraj Drzave Pojedinacno)</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;","import React from 'react';\r\n\r\n//import Cards from './components/Cards/Cards';\r\n//import Cards from './components/Chart/Chart';\r\n//import Cards from './components/CountryPicker/CountryPicker';\r\n\r\nimport{Cards, Chart, CountryPicker} from'./components'; //Jednostavnije nacin importanja za razliku od gornjeg nacina, povezan sa index.js u componentsu\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\nimport coronaImage from './images/coronaworld4.png';\r\nclass App extends React.Component {\r\n    state= {\r\n        data: {},\r\n        country: '',    \r\n    }\r\n//componentDidMount ova se metoda koristi za dohvacanje podataka iz exstenog api-a async koristimo zbog await-a\r\n    async componentDidMount(){\r\n        const data = await fetchData();\r\n\r\n        this.setState({data});\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const data = await fetchData(country);\r\n\r\n        this.setState({data, country:country });\r\n    }\r\n\r\n\r\n    render(){\r\n        const { data, country } = this.state;\r\n\r\n        return(\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={coronaImage} alt=\"COVID19\"/>\r\n                <Cards data= {data} />\r\n                <Chart data= {data} country={country}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n            </div>\r\n              );\r\n            \r\n            }\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root')); //Povezano s rootom iz index.html\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1uGta\",\"image\":\"App_image__2sghJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__tcjsY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3Vedp\"};","module.exports = __webpack_public_path__ + \"static/media/coronaworld4.dc3deff7.png\";"],"sourceRoot":""}